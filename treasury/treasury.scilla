scilla_version 0

import ListUtils BoolUtils

(***************************************************)
(*               Associated library                *)
(***************************************************)
library WalletLib

(* Event for communicating a new transaction id *)
let mk_transaction_added_event =
  fun (tc : Uint32) =>
  fun (recipient : ByStr20) =>
  fun (amount : Uint128) =>
  fun (deadline : BNum) =>
  fun (tag : String) =>
    { _eventname : "Transaction created" ; transactionId : tc; recipient : recipient; amount : amount; deadline : deadline; tag : tag  }

(* Event for communicating the execution of a transaction *)
let mk_transaction_executed_event =
  fun (tc : Uint32) =>
  fun (recipient : ByStr20) =>
  fun (amount : Uint128) =>
  fun (deadline : BNum) =>
  fun (tag : String) =>
    { _eventname : "Transaction executed"; transactionId : tc; recipient : recipient; amount : amount; deadline : deadline; tag : tag }

(* Event for communicating that a transaction was signed *)
let mk_signed_transaction_event =
  fun (tc : Uint32) =>
    { _eventname : "Transaction signed"; transactionId : tc }

(* Event for communicating that a signature was revoked *)
let mk_signature_revoked_event =
  fun (tc : Uint32) =>
    { _eventname : "Signature revoked"; transactionId : tc }

type Error =
| NonOwnerCannotSign
| UnknownTransactionId
| InsufficientFunds
| NoSignatureListFound
| InvalidContract
| InvalidAmount
| NotEnoughSignatures
| SenderMayNotExecute
| NonOwnerCannotSubmit
| IncorrectSignatureCount
| ExpiredDeadline

(* Error events *)
let mk_error_event =
  fun (err : Error) =>
  let err_code = 
    match err with
    | NonOwnerCannotSign        => Int32 -1
    | UnknownTransactionId      => Int32 -2
    | InsufficientFunds         => Int32 -3
    | NoSignatureListFound      => Int32 -4
    | InvalidContract           => Int32 -5
    | InvalidAmount             => Int32 -6
    | NotEnoughSignatures       => Int32 -7
    | SenderMayNotExecute       => Int32 -8
    | NonOwnerCannotSubmit      => Int32 -9
    | IncorrectSignatureCount   => Int32 -10
    | ExpiredDeadline           => Int32 -11
    end in
  { _eventname : "WalletError" ; err_code : err_code }

let t = True
let f = False
let zero = Uint32 0
let one = Uint32 1
let transaction_inc = one

(* One (potential) transaction, consisting of a recipient address, an amount, *)
(* and a tag (in case the recipient is another contract *)
type Transaction =
| Trans of ByStr20 Uint128 BNum String

let oneMsg : Message -> List Message =
  fun (msg : Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

(* Make map of owners *)
let mk_owners_map =
  fun (owners : List ByStr20) =>
    let init = Emp ByStr20 Bool in
    let iter =
      fun (acc : Map ByStr20 Bool) =>
      fun (cur_owner : ByStr20) =>
        (* Add owner unconditionally. We check for duplicates later *)
        builtin put acc cur_owner t
        in
    let folder = @list_foldl ByStr20 (Map ByStr20 Bool) in
    folder iter init owners

contract Wallet
(
owners_list         : List ByStr20,
required_signatures : Uint32
)
with
  let len = @list_length ByStr20 in
  let no_of_owners = len owners_list in
  let owners_ok = builtin lt zero no_of_owners in
  let required_sigs_ok = builtin lt zero required_signatures in
  let all_ok = andb required_sigs_ok owners_ok in
  (* Building the owners map is expensive, so avoid checking the owners map until *)
  (* everything else has been checked *)
  match all_ok with
  | True =>
    let owners_map = mk_owners_map owners_list in
    let size_of_owners_map = builtin size owners_map in
    builtin eq size_of_owners_map no_of_owners
  | False =>
    False
  end
=>

(* adr -> True indicates an owner *)
(* adr not in map indicates non-owner *)
(* adr -> False is not used *)
field owners           : Map ByStr20 Bool = mk_owners_map owners_list

field transactionCount : Uint32 = Uint32 0

field requiredSignatures : Uint32 = required_signatures

(* Collected signatures for transactions *)
field signatures       : Map Uint32 (Map ByStr20 Bool) =
  Emp Uint32 (Map ByStr20 Bool)

(* Running count of collected signatures for transactions *)
field signature_counts : Map Uint32 Uint32 =
  Emp Uint32 Uint32

(* Transactions *) 
field transactions     : Map Uint32 Transaction =
                           Emp Uint32 Transaction

procedure MakeError (err : Error)
  e = mk_error_event err;
  event e
end

procedure ThrowIfExpired(deadline_block: BNum)
  current_block <- & BLOCKNUMBER;
  is_not_expired = builtin blt current_block deadline_block;
  match is_not_expired with
  | True =>
  | False =>
    err = ExpiredDeadline;
    MakeError err
  end
end

(* Add signature to signature list *)
procedure AddSignature (transactionId : Uint32, signee : ByStr20)
  count <- signature_counts[transactionId];
  match count with
  | None =>
    (* 0 signatures *)
    signature_counts[transactionId] := one
  | Some c =>
    new_c = builtin add c one;
    signature_counts[transactionId] := new_c
  end;
  e = mk_signed_transaction_event transactionId;
  event e
end

(* Submit a transaction for future signoff *)
transition SubmitTransaction (recipient : ByStr20, amount : Uint128, deadline : BNum, tag : String)
  (* Only allow owners to submit new transactions *)
  sender_is_owner <- exists owners[_sender];
  match sender_is_owner with
  | False =>
    err = NonOwnerCannotSubmit;
    MakeError err
  | True =>
    tc <- transactionCount;
    zero = Uint128 0;
    amount_is_zero = builtin eq amount zero;
    match amount_is_zero with
    | True =>
      (* Illegal transaction *)
      err = InvalidAmount;
      MakeError err
    | False =>
      (* Create new transaction *)
      transaction = Trans recipient amount deadline tag;
      (* Add transaction to outstanding list of transactions *)
      transactions[tc] := transaction; 
      (* Sender implicitly signs *)
      AddSignature tc _sender;
      (* Increment transaction counter *)
      tc_new = builtin add tc transaction_inc;
      (* Update transaction count *)
      transactionCount := tc_new;
      (* Create event with transaction Id *)
      e = mk_transaction_added_event tc recipient amount deadline tag;
      event e
    end
  end
end

(* Sign off on an existing transaction *)
transition SignTransaction (transactionId : Uint32)
  (* Only the owner is allowed to sign off transactions *)
  sender_is_owner <- exists owners[_sender];
  match sender_is_owner with
  | False =>
    err = NonOwnerCannotSign;
    MakeError err
  | True =>
    (* Transaction must have been submitted *)
    transaction <- transactions[transactionId];
    match transaction with
    | None =>
      err = UnknownTransactionId;
      MakeError err
    | Some _ =>
      (* Remaining error cases handled by AddSignature *)
      AddSignature transactionId _sender
    end
  end
end

(* Delete transaction and signatures *)
procedure DeleteTransaction (transactionId : Uint32)
  delete transactions[transactionId];
  delete signature_counts[transactionId]
end

(* Execute signed-off transaction *)
transition ExecuteTransaction (transactionId : Uint32)
  transaction_opt <- transactions[transactionId];
  match transaction_opt with
  | None =>
    (* Transaction was not found. *)
    err = UnknownTransactionId;
    MakeError err
  | Some (Trans recipient amount deadline tag) =>
    ThrowIfExpired deadline;
    (* Only the recipient or an owner can execute the transaction *)
    recipient_is_sender = builtin eq recipient _sender;
    sender_is_owner <- exists owners[_sender];
    sender_may_execute = orb recipient_is_sender sender_is_owner;
    match sender_may_execute with
    | False =>
      err = SenderMayNotExecute;
      MakeError err
    | True =>
      sig_count_opt <- signature_counts[transactionId];
      match sig_count_opt with
      | None =>
        (* Signature count not found, even though the transaction exists.*)
        err = NoSignatureListFound;
        MakeError err
      | Some sig_count =>
        requried_number <- requiredSignatures;
        not_enough_signatures = builtin lt sig_count requried_number;
        match not_enough_signatures with
        | True =>
          err = NotEnoughSignatures;
          MakeError err
        | False =>
          (* Transaction approved, and enough money available. *)
          (* Remove transaction and signatures, and execute. *)
          DeleteTransaction transactionId;
          msg_tx_zil =  { _tag : tag; _recipient: recipient; _amount: amount };
          msgs = oneMsg msg_tx_zil;
          send msgs;
          e = mk_transaction_executed_event transactionId recipient amount deadline tag;
          event e
        end
      end
    end
  end
end

(* Revoke signature of existing transaction, if it has not yet been executed. *)
transition RevokeSignature (transactionId : Uint32)
  count <- signature_counts[transactionId];
  match count with
  | None =>
    err = IncorrectSignatureCount;
    MakeError err
  | Some c =>
    c_is_zero = builtin eq c zero;
    match c_is_zero with
    | True =>
      err = IncorrectSignatureCount;
      MakeError err
    | False =>
      new_c = builtin sub c one;
      signature_counts[transactionId] := new_c;
      e = mk_signature_revoked_event transactionId;
      event e
    end
  end
end

(* Add funds to wallet *)
transition AddFunds ()
  accept
end

transition SetRequiredSignature(newNumber: Uint32)
  requiredSignatures := newNumber
end
